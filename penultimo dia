#from cv2 import *
import cv2
from threading import Timer

stream=cv2.VideoCapture(0)

TAMANHO_BOLINHA = 600;

global matriz
global lDic
matriz=[]
global timer
timer = None

# def matrizInv(m):
#     mInv=[]
#     i=0
#     j=0
#     while j<8:
#         mInv.append([])
#         while i<5:
#             mInv[j].append(m[i][j])
#             i+=1
#         i=0
#         j+=1
#     return mInv
# 
# def matrizLuzes(mInv):
#     mLuzes=[]
#     i=0
#     while i<len(mInv):
#         if i%2==0:
#             mLuzes.append(mInv[i])
#         else:
#             mLuzes.append(mInv[i][::-1])
#         i+=1
#     return mLuzes
#  
# def criaString(m):
#     s="posicao:"
#     for lista in m:
#         for bolinha in lista:
#             if bolinha==None:
#                 s+="W"
#             elif bolinha=="azul":
#                 s+="B"
#             elif bolinha=="preto":
#                 s+="X"
#             elif bolinha=="vermelho":
#                 s+="R"
#             elif bolinha=="verde":
#                 s+="G"
#             elif bolinha=="laranja":
#                 s+="O"
#     return s
# 
# def enviaLeds(m):
#     mInv=matrizInv(m)
#     mL=matrizLuzes(mInv)
#     s=criaString(mL)
#     return s

def envia_matriz():
    print(matriz)
#     s=enviaLeds(matriz)
#     print(s)
    timer= Timer(2, envia_matriz)
    timer.start()
    return
envia_matriz()

def vInicialDic(matriz):
    lDic=[]
    i=0
    for linha in matriz:
        lDic.append([])
        for posicao in linha:
            lDic[i].append({"corAntiga":None,"corAtual":None,"contagem":0})
        i+=1
    return lDic

def atualizaContagemDic(d):
    if d["corAntiga"]==d["corAtual"]:
        d["contagem"]+=1
        if d["contagem"]==5:
            return True
    else:
        d["corAntiga"]=d["corAtual"]
        d["contagem"]=0

def atualizaLdeDic(matrizNova,lD):
    linha=0
    for row in matrizNova:
        coluna=0
        for bolinha in row:
            lD[linha][coluna]["corAtual"]=matrizNova[linha][coluna]
            if atualizaContagemDic(lD[linha][coluna]):
                return True
            coluna+=1
        linha+=1

while True:
    _, imagem = stream.read()
   
    linhas = 5
    colunas = 8
    tamanho = 70
   
    
    
    #tabuleiro matriz
    matriz=[[None,None,None,None,None,None,None,None],
            [None,None,None,None,None,None,None,None],
            [None,None,None,None,None,None,None,None],
            [None,None,None,None,None,None,None,None],
            [None,None,None,None,None,None,None,None],
            ]
    
    lDic=vInicialDic(matriz)

#        
    imagemHSV = cv2.cvtColor(imagem,cv2.COLOR_BGR2HSV)
    
    dCores={
            "amarelo":{"escuro":(10, 100, 10),"claro":(25, 255, 255)},
            "verde":{"escuro":(50,200,10),"claro":(90,255,120)},
            "vermelho":{"escuro":(0,100,40),"claro":(10,255,255)},
            "azul":{"escuro":(87,70,170),"claro":(110,210,255)},
            "preto":{"escuro":(110,215,10),"claro":(125,255,215)},
            "rosa":{"escuro":(145,80,2),"claro":(190,200,255)},
            "roxo":{"escuro":(115,35,40),"claro":(130,235,250)}
            
            }
    #,"azul":{"escuro":(130,250,20),"claro":(115,200,255)}}
#
#"amarelo":{{"escuro":(0,25,0),"claro":(0,35,0)}},"verde":{{"escuro":(),"claro":()}},"rosa":{{"escuro":(),"claro":()}},"roxo":{{"escuro":(),"claro":()}}
    for (cor,dCor) in dCores.items():
        mascara = cv2.inRange(imagemHSV,dCor["escuro"],dCor["claro"])
        imagem2 = cv2.bitwise_and(imagem, imagem, mask=mascara)
        cv2.imshow("Janela1",imagem2)
        contornos,_ = cv2.findContours(mascara,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        
        
    #detecta quando uma bolinha vermelha entra no campo da camera
        for contorno in contornos:
            x,y,comprimento,altura = cv2.boundingRect(contorno)
            if comprimento*altura>=TAMANHO_BOLINHA:
                coordx=(x-50)//50
                coordy=(y-50)//50
                if coordx<=7 and coordy<=4 and coordx>=0 and coordy>=0:
                    cv2.rectangle(imagem,pt1=(x,y),pt2=(x+comprimento,y+altura),color=(240,250,70),thickness=2)
                    #putText(imagem,("VERMELHO: Linha: "+str(coordy+1)+", Coluna: "+str(coordx+1)),(20,30),color=(0,0,255),fontFace=FONT_HERSHEY_SIMPLEX,fontScale=1,thickness=4)
                    #print(cor+" - Linha: "+str(coordy+1)+", Coluna: "+str(coordx+1))
                    matriz[coordy][coordx]=cor
                    
#                     if atualizaLdeDic(matriz,lDic):
#                         print("LALALALA")
#                         print(matriz)
                    

        
    #desenhando tabuleiro
    i=0
    x1=50
    y1=50
    
    while i<colunas:
        cv2.rectangle(imagem,pt1=(x1,y1),pt2=(x1+tamanho,(linhas+1)*tamanho),color=(90,90,90),thickness=3)
        x1+=tamanho
        i+=1
#        
    j=0
    x1=50
    y1=50
    while j<linhas:
        cv2.rectangle(imagem,pt1=(x1,y1),pt2=((colunas+1)*tamanho,y1+tamanho),color=(240,50,70),thickness=3)
        y1+=tamanho
        j+=1

    cv2.imshow("Minha Janela",imagem)
    
    
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break
    
   
stream.release()
destroyAllWindows()
